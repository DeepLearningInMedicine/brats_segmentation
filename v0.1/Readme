Author:         Sajid Iqbal
Code Version:   0.1

This file describes the working of toy code for BRATS segmentation challenge.
This code serves following purpose:
1. Reading multimodal medical images
2. Reading the ground truth images
3. preparing medical images for processing
4. applying simple neural network using tensor flow


Segmentation.py
===================================================
    This file creates objects of both classes.
    train_x,train_y,test_x,test_y=br.get_test_n_train_data('BRATS-Training/**/**/**/*.mha') is the only method that needs to be called
    from BRATS class.
    It applies tensorflow classification on patches and gets results.





Prepare_data.py
===================================================
This file defines two classes
    1. BRATS
    2. Training_batch_iterator

BRATS:
    __init__():                 This method defines two variables and initializes them with empty string

    set_training_path(path):    it gets path in glob-package format and from where files are read and next code

    get_training_path():        this method returns training path of data

    set_test_path(path):        this method sets the path of test data set

    get_test_path():            this method returns the path of test set

    read_train_files()          this method reads the training files of different modalities i.e. T1, T1c, T2, Flair and ground truth from BRATS dataset
                                Files of each modality are returned in seperate collection

    make_train_patches(self,data_files_list, label_map_list,patch_size)
                                data_files_list: this is collection of file names belonging to one modality only
                                label_map:       this is collection of ground_truth files
                                patch_size;      size of patches that are required to be made

                                This method gets the data files list and map files list. It reads images from given lists and converts them into numpy array
                                to make processing better, 240x240 matrices are changed to 250x250
                                It creates the patches of same size and class of each file is deduced from the class of central pixel of label map patch
                                the created patches are stored in folder train_patches located in directory where code files are stored

    make_test_patches(self,data_files_list, label_map_list,patch_size):
                                It works in same way as that of make_train_patches for training files.

    make_file_name(self,fname, slice_idx, patch_idx, patch_class):
                                this method makes a name for patch in the format filename-sliceno-patchno-class
                                It is used internally by make-test-patches and make-training-patches

    read_data_n_labels_4m_patches(self,path)
                                this method reads patches from given path and extracts class from file name made in make-file-name method

    make_1hot_encoding(self,pclass):
                                 this method gets patch class as input and creates its one-hot encoding and returns that one-hot encoding

    get_test_n_train_data(self,train_path):
                                this is master method that takes train path and runs all other methods of same class in sequence.
                                It returns train_X,train_Y,test_X,test_Y. No actual data is returned but file names are returned

    read_test_patches(self,test_file_names):
                                test_file_names parameter contains files names in particular patch. It reads data from patch files. Flatens each patch data, creates
                                a matrix and returns it.


Training_batch_iterator(object):

    __init__(self):             this is constructor

    get_next_batch(self,X,Y,batch_size):
                                X:          list containing training files names.
                                Y:          list containing label names
                                batch_size: no of patches to be read
